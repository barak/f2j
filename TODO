Relatively high priority modifications.  (not necessarily listed
in order of priority)

-Automate the build procedure using autogen/automake/autoconf.

-Isolate the WRITE/FORMAT code in the lexer into a subroutine.

-Work on front-end
   The front-end of f2j is sufficient for BLAS/LAPACK code, but to
   handle any other code it will have to be extended.  I think the
   best way to go would be to graft a full f77 parser from another
   compiler or tool (such as FTNCHEK) onto f2j.  This is no small
   task since it could alter the structure of the syntax tree, thus
   requiring all subsequent stages of the translator to be modified.

-Finish Jasmin code generator
   Java source code still has the advantage of being much easier
   to debug and allows us to rely on javac to optimize the code,
   but much of the optimization emphasis these days focuses on 
   bytecode anyway.  Also it would help in translating code with
   complex numbers and would eliminate the need for the bytecode
   post-processing to eliminate gotos.  Finishing the Jasmin code
   generation could be the first step towards going directly to
   bytecode.  We would have to add some common compiler optimizations
   to the translator to compensate for the fact that we wouldn't
   be able to rely on javac to optimize anything.

-Port fortran I/O library to java
   I have a BSD fortran I/O library somewhere (written in C) that would
   make translating READ,WRITE,FORMAT statements much easier - if only
   it was converted to Java.  It's around 6000 lines of C code, if I
   remember correctly.

-Threadsafe version
   One or two people have asked about this.  It's not a bad idea, but
   it would change the user interface and code generation.  The code
   that generates static initializers would need to be changed.

-Support more data types
   Support for single-precision should be fairly easy, but complex
   will not.  To do efficiently will probably require translating
   directly to Jasmin or bytecode.

-More translator optimizations
   Might be interesting to see if we can optimize the array indexing
   since it gets so cumbersome in the translation.  The java compiler
   probably optimizes the index expressions - however, even if it turns
   out that there is no speed improvement, it would still help the
   readability of the resulting source code a lot.  If we end up
   translating directly to Jasmin or bytecode, then we should definitely
   try to optimize some of this.  Also string operations (accessing a
   single character, substring, etc) may leave some room for optimization.

-Other stuff mentioned in the f2j paper.
   Implementing more intrinsics, multiple file support, etc.

-Create AST charts
   It would help to have a chart of the structure of each kind of
   node in the abstract syntax tree (especially when finishing
   the Jasmin code generator).

-Create API docs
   Write some API documentation - something a little more extensive
   than the current javadoc pages.  There is a standard link
   generated by javadoc, "API Users Guide", that should be linked
   to the API docs whenever complete.
